{"/home/travis/build/npmtest/node-npmtest-calendar-tools/test.js":"/* istanbul instrument in package npmtest_calendar_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/lib.npmtest_calendar_tools.js":"/* istanbul instrument in package npmtest_calendar_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_calendar_tools = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_calendar_tools = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-calendar-tools && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_calendar_tools */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_calendar_tools\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_calendar_tools.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_calendar_tools.rollup.js'] =\n            local.assetsDict['/assets.npmtest_calendar_tools.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_calendar_tools.__dirname + '/lib.npmtest_calendar_tools.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/node_modules/calendar-tools/lib/calendar-tools.js":"\n/*!\n* calendar-tools\n* Copyright(c) 2011 Damian Suarez <damian@learnboost.com>\n* MIT Licensed\n*/\n\nexports = module.exports;\n\n/**\n * Library version.\n */\n\nexports.version = '0.3.8';\n\n/**\n * Expose recurrence\n */\n\nexports.recurrence = require('./recurrence');\n\n/**\n * Expose seed\n */\n\nexports.seed = require('./seed');\n\n/**\n * Expose atom\n */\n\nexports.atom = require('./atom');\n\n/**\n * Expose rfc2445\n */\n\nexports.rfc2445 = require('./rfc2445');\n\n/**\n * Expose util\n */\n\nexports.util = require('./util');\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/node_modules/calendar-tools/lib/recurrence.js":"/*!\n* recurrence\n* Copyright(c) 2011 Damian Suarez <rdsuarez@gmail.com>\n* MIT Licensed\n*/\n\n/**\n * modeule dependencies\n */\nvar Seed = require('./seed');\n\n/**\n * exports recurrence Class\n */\n\nvar modRecurrence = module.exports = function (evs, options) {\n  return new Recurrence(evs, options);\n}\n\n/**\n * Initialize a new 'Recurrence' object with the given 'ev'\n *\n * @param {Object|Array} evs: object event or an array events collection\n * @param {Object}  options: {\n *      period: {\n *          start: {Date} - period start date\n *        , end: {Date} - period end date\n *      }\n *    , addNoRec: {Boolean} - add no-recurrence events\n *    , systemTZCorrection: {Boolean} - apply system timezone correction\n *    , offsetCorrection: {Number} - apply offset correction (minutes)\n *  }\n\n * return {Array} instances series\n */\n\nfunction Recurrence (evs, options) {\n  // add default options\n  var start = new Date()\n  this.options = {\n          start: start\n        , end: new Date(+start + 1000*60*6024)\n        , addNoRec: true\n        , systemTZCorrection: false\n        , offsetCorrection: 0\n      };\n\n  // mix options\n  for (var k in options)\n    this.options[k] = options[k];\n\n  // store events\n  evs = evs instanceof Array ? evs : [evs];\n  this.events = evs;\n\n  // set period\n  this.setPeriod();\n\n  // planting seeds\n  this.seeds = [];\n  this.plantingSeeds();\n}\n\n// proto alias\nvar _pttRec = Recurrence.prototype;\n\n/**\n * setPeriod() method.\n */\n\n_pttRec.setPeriod = function (start, end) {\n  start = start || this.options.start || new Date();\n  end = end || this.options.end;\n\n  // set period\n  if (!end) {\n    end = new Date(+start);\n    end.setDate(start.getDate() + 1);\n  }\n\n  var p = this.period = {\n          start: typeof start == 'string' ? new Date(start) : start\n        , end: typeof end == 'string' ? new Date(end) : end\n      };\n\n  return p;\n}\n\n/**\n * planting seeds. That is register all events crating 'seed' objects\n */\n\n_pttRec.plantingSeeds = function () {\n  for (var s = 0; s < this.events.length; s++)\n    this.seeds.push(new Seed(this.events[s], this, this.options));\n}\n\n/**\n * return seeed events\n */\n\n_pttRec.getSeeds = function () {\n  return this.seeds;\n}\n\n/**\n * getInstances()\n *\n * return {Array} all instances of all seed events\n */\n\n_pttRec.getInstances = function (start, end) {\n  var allInstances = [];\n\n  for (var i = 0; i < this.seeds.length; i++) {\n    var seed = this.seeds[i];\n    allInstances = allInstances.concat(seed.getInstances(start, end));\n  };\n\n  return allInstances;\n}\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/node_modules/calendar-tools/lib/seed.js":"/*!\n* seed\n* Copyright(c) 2011 Damian Suarez <rdsuarez@gmail.com>\n* MIT Licensed\n*/\n\n/**\n * add util module\n */\n\nvar util = require('./util')\n  , Instance = require('./instance');\n\n/**\n * alias\n */\n\nvar _date = util.date\n  , _array = util.array\n  , _c = _date['const']\n  , clearTime = _date.clearTime;\n\n/**\n * exports Seed Class\n */\n\nvar modSeed = module.exports = function (ev, parent, options) {\n  return new Seed(ev, parent, options);\n}\n\n/**\n * Seed class\n *\n * @param {Event Object}\n * @param {Recurrence Object} (optional)\n * @param {Object} options:\n *  - addNoRec\n *  - offsetCorrection\n */\n\nfunction Seed (ev) {\n  if (!ev)\n    throw new Error ('Seed: need necessary an event to generate instances');\n\n  var args = arguments;\n  \n  // Seed is called for Recurrence?\n  var calledByRec = args[1] && args[1].events;\n\n  if (!calledByRec)\n    this.parent = {\n        options: {}\n    }\n  else\n    this.parent = args[1];\n\n  // options\n  var options = calledByRec ? args[2] : args[1];\n  this.options = {\n          addNoRec: false\n        , offsetCorrection: 0\n      };\n\n  // mix options\n  for (var k in options)\n    this.options[k] = options[k];\n\n  // set event like a object property\n  this.ev = ev;\n\n  // normalize seed\n  this.normalize();\n\n  if (this.options.start)\n    this.setPeriod();\n}\n\n// alias Instance prototype\nvar pttSeed = Seed.prototype;\n\n/**\n * setPeriod()\n * set period limiting the series generation\n *\n * @param {Date} start: period start date \n * @Param {Date} end: period end date\n */\n\npttSeed.setPeriod = function (start, end) {\n  start = start || this.options.start || this.parent.period.start || new Date();\n  end = end || this.options.end || this.parent.period.end;\n\n  // set period\n  if (!end) {\n    end = new Date(+start);\n    end.setDate(start.getDate() + 1);\n  }\n\n  var p = this.period = {\n          start: typeof start == 'string' ? new Date(start) : start\n        , end: typeof end == 'string' ? new Date(end) : end\n      };\n\n  return p;\n}\n\n/**\n * getPeriod()\n */\n\npttSeed.getPeriod = function () {\n  return this.period;\n}\n\n/**\n * normalize()\n * normalize some event properties\n */\n\npttSeed.normalize = function () {\n  // date tz correction. tz in minutes\n  function tzCorrection(date, tz) {\n    if(!date) return date;\n    date.setMinutes(date.getMinutes() - tz);\n    return date;\n  }\n\n  // converts string to date object if is neccesary\n  if (typeof this.ev.start == 'string')\n    this.ev.start = new Date(this.ev.start);\n\n  if (typeof this.ev.end == 'string')\n    this.ev.end = new Date(this.ev.end);\n\n  if (typeof this.ev.stop == 'string')\n    this.ev.stop = new Date(this.ev.stop);\n\n  // timezone system correction\n  // - apply offsetCorrection + systemTZCorrection\n  var offset = this.options.offsetCorrection + (\n                  this.options.systemTZCorrection\n                    ? this.ev.start.getTimezoneOffset()\n                    : 0\n                  );\n\n  // timezone/offset correction\n  tzCorrection(this.ev.start, offset);\n  tzCorrection(this.ev.end, offset);\n  tzCorrection(this.ev.stop, offset);\n\n  // weekly mode\n  if (this.ev.frequency == 'week') {\n    // build jumping vector\n    this.setJumpingVector();\n\n    // avoid falling into the void. start/end date offset correction\n    if (!this.jumpingVector[this.ev.start.getDay()]) {\n      var jmp = this.jumpingVector\n        , jl = jmp.length;\n\n      for (var i = 0; i < jl; i++) {\n        var d = this.ev.start.getDay() + i;\n        d = d >= jl ? d - jl : d;\n        if(jmp[d] !== null)\n          break;\n      };\n\n      this.ev.start.setDate(this.ev.start.getDate() + i);\n      this.ev.end.setDate(this.ev.end.getDate() + i);\n    }\n  }\n\n  // recurrence default value\n  var rec = this.ev.recurrence || {}\n    , defVals = { every: 1\n                , 'end-by': {\n                      type: 'never'\n                    , after: 5\n                    , on: null\n                  }\n                , 'repeat-on': {}\n                , exceptions: []\n              };\n\n  // mix options with defaults\n  for (var k in defVals)\n    if(!rec[k])\n      rec[k] = defVals[k];\n\n  // enf-by on date\n  if (rec['end-by'].on == 'string')\n    rec['end-by'].on = new Date(rec['end-by'].on);\n\n  return this.ev;\n}\n\n/**\n * getElapsedInstances()\n * return elapsed instances of the recurring event in function of date period\n * limit\n *\n * @param {Date} limitDate\n * @param {Boolean} addPartialInstance\n *\n * return {Number} elapsed instances\n */\n\npttSeed.getElapsedInstances = function (limitDate, addPartialInstance) {\n  // alias\n  var ev = this.ev\n    , limitDate = limitDate || this.period.start\n    , elapsedInstances = 0\n    , self = this;\n\n  // add partial instance\n  if (addPartialInstance) {\n\n    // computing endLimitDate\n    var endLimitDate = new Date(ev.end);\n\n    // increment one day if is allday event\n    if (ev.allDay)\n      endLimitDate.setDate(endLimitDate.getDate() + 1);\n\n    var evDuration = _date.getDiff(endLimitDate, ev.start) - 1;\n\n    limitDate = new Date(+limitDate + evDuration);\n\n    var tzdiff = _date.getTZDiff(limitDate, this.ev.start);\n    if(tzdiff)\n      limitDate.setMinutes(limitDate.getMinutes() - tzdiff);\n  }\n\n  function getDaysByPeriod (ref, daysByPeriod, start) {\n    var initDate = start || self.ev.start\n      , endDate = self._getDateNextInstance(ref)\n      , diffInDays = _date.getDiffInDays(endDate, initDate, 'floor');\n\n    if (self.ev.allDay)\n      clearTime(initDate);\n\n    return Math.ceil(diffInDays / daysByPeriod);\n  }\n\n  switch (ev.frequency) {\n    case 'day':\n      elapsedInstances = getDaysByPeriod(limitDate, ev.recurrence.every);\n    break;\n\n    case 'week':\n      this._walkWeek(this.ev.start, this.ev.start, function (date) {\n        elapsedInstances += getDaysByPeriod(limitDate\n                              , ev.recurrence.every * 7, date);\n      });\n    break;\n\n    case 'month':\n      var start = this.ev.start\n        , end = self._getDateNextInstance(limitDate)\n        , diffInMonths = _date.getDiffInMonths(end, start);\n\n      elapsedInstances = Math.ceil(diffInMonths / ev.recurrence.every);\n\n      if (ev.recurrence['repeat-on'].mode == 'day-of-week') {\n        var endC = new Date(+end + _date.getDiff(this.ev.end, this.ev.start))\n        if (ev.allDay)\n          endC.setDate(endC.getDate() + 1);\n\n        if (+limitDate >= +endC)\n          elapsedInstances++;\n      }\n    break;\n\n    case 'year':\n      var start = this.ev.start\n        , end = self._getDateNextInstance(limitDate)\n        , diffInYears = _date.getDiffInYears(end, start);\n\n      elapsedInstances = Math.ceil(diffInYears / ev.recurrence.every);\n    break;\n  }\n\n  return elapsedInstances;\n}\n\n/**\n * Generating instances process\n * generates (and returns) all instances of recurring seed event passing\n * (optionally) start/end period date.\n *\n * @param {Date} (optional) start: period start date\n * @param {Date} (optional) end: period end date\n *\n * @return {Array} Instances objects Arrays\n */\n\npttSeed.genInstances = function (start, end) {\n  // redefine period \n  if (start || end)\n    this.setPeriod(start, end);\n\n  var instances = [];\n\n  // alias\n  var ev = this.ev\n    , start = this.period.start\n    , end = this.period.end;\n\n  // add no-recurrence events\n  if (!ev.frequency) {\n    if (this.options.addNoRec) {\n      if ( ev.start >= start && ev.start < end\n          || ev.end < end && ev.end >= start\n          || ev.start <= start && ev.end >= end\n         ) {\n        return [new Instance(this, this.ev.start)];\n      }\n      else return[];\n    }\n    else\n      return [];\n  }\n\n  var cursorDate = this._getDateNextInstance(start)\n    , jumper = +cursorDate\n    , n = this.getElapsedInstances(start)\n    , prevInstance = null\n    , countdown = this._getCountdown()\n    , prevInstance = null;\n\n  while (countdown > 0) {\n    // exception instances control\n    var excKey = _date.getFormattedDate(cursorDate, false);\n    if (_array.indexOf(ev.recurrence.exceptions, excKey) < 0) {\n      var Inst = new Instance(this, cursorDate);\n\n      Inst.n = n;\n      Inst._prevInst = prevInstance;\n\n      instances.push(Inst);\n\n      n++;\n      prevInstance = Inst;\n    }\n\n    cursorDate = this._getDateNextJump(cursorDate);\n    countdown--;\n  }\n\n  return instances;\n}\n\n/**\n * get all instances for the given start/end period dates\n */\n\npttSeed.getInstances = function (start, end) {\n  return this.genInstances(start, end);\n}\n\n/**\n * _walkWeek\n * covers a complete period of one week executing callback fn\n *\n * @param {Date} start\n * @param {Date} mark\n * @param {Function} fn: callback\n */\n\npttSeed._walkWeek = function (start, mark, fn) {\n  var cursorDay = start.getDay()\n    , addDays = 0\n    , jumping = this.jumpingVector;\n\n  mark = new Date(mark);\n\n  var prevMark = null\n    , nextMark = new Date(mark);\n\n  // walk all days of a week block\n  for (var j = 0; j < jumping.length; j++) {\n    if (jumping[cursorDay]) {\n\n      // break bucle\n      if (cursorDay == start.getDay() && j) {\n        j = jumping.length;\n        continue;\n      }\n\n      nextMark.setDate(mark.getDate() + jumping[cursorDay]);\n      fn(mark, prevMark, nextMark);\n\n      // computing next step\n      prevMark = new Date(mark);\n      mark.setDate(mark.getDate() + jumping[cursorDay]);\n      addDays += jumping[cursorDay];\n      cursorDay = (cursorDay + jumping[cursorDay]) % jumping.length;\n\n    }\n    else\n      throw new Error('seems cursor day vacuum has fallen');\n\n  };\n\n}\n\npttSeed._getCountdown = function () {\n  // alias\n  var start = this.period.start\n    , end = this.period.end\n    , ev = this.ev;\n\n  var elapsedInstances = this.getElapsedInstances()\n    , maxInstances = this.getElapsedInstances(end, true)\n    , endByInstances = maxInstances;\n\n  // computing total instances through start / enda dates limits\n  switch (ev.recurrence['end-by'].type) {\n    case 'after':\n      endByInstances = ev.recurrence['end-by'].after;\n    break;\n\n    case 'on':\n      var on = new Date(ev.recurrence['end-by'].on);\n      on.setDate(on.getDate() + 1);\n      endByInstances = this.getElapsedInstances(on, true);\n    break;\n  }\n\n  var total = Math.min(maxInstances, endByInstances);\n  return Math.max(total - elapsedInstances, 0);\n}\n\n/**\n * setJumpingVector()\n * return Array with the jump day by day for 'weekly' mode\n *\n * @param {Object Event}\n * return {Array} jumping vector\n */\n\npttSeed.setJumpingVector = function () {\n  var ev = this.ev;\n\n  var cd = null\n    , pd = null\n    , fd = null\n    , jumpingVector = [null, null, null, null, null, null, null]\n    , repOn = ev.recurrence['repeat-on']\n    , count = 0;\n\n  for (var k in repOn)\n    count++;\n\n  if (!repOn || !count) {\n    jumpingVector[ev.start.getDay()] = 7 * ev.recurrence.every;\n    return this.jumpingVector = jumpingVector;\n  }\n\n  // build repeat on Array\n  // contains all days sorting by day number\n  var repOnArr = [];\n  for (var kd in repOn)\n    repOnArr.push (kd);\n\n  repOnArr.sort (function (e0, e1) {\n    return _c.daysMap[e0] > _c.daysMap[e1] ? 1 : -1;\n  });\n\n  // building jumping vector - determined jump for each day number\n  // [S, M, T, W, T, F, S]\n  for (var kdi = 0; kdi < repOnArr.length; kdi++) {\n    var kd = repOnArr[kdi];\n    cd = _c.daysMap[kd];\n\n    if (pd === null)\n      fd = cd;\n    else\n      jumpingVector[pd] = cd - pd;\n\n    pd = cd;\n  };\n\n  // last jump day every correction\n  jumpingVector[cd] = 7 * ev.recurrence.every - pd + fd;\n\n  return this.jumpingVector = jumpingVector;\n}\n\n/**\n * _getJumpingVector\n */\n\npttSeed._getJumpingVector = function () {\n  return this.jumpingVector;\n}\n\n/**\n * _getDateInstance()\n */\n\npttSeed._getDateInstance = function (_limit, dir) {\n  var ev = this.ev;\n\n  var limit = new Date(_limit || this.period.start);\n  dir = dir || 'prev';\n\n  var prev = dir == 'prev'\n    , mark = new Date(prev ? +ev.start : +ev.end);\n\n  // allDay - limit date correction\n  if (this.ev.allDay) {\n    clearTime(mark);\n    if (!prev) {\n      mark.setDate(mark.getDate() + 1);\n    }\n  }\n\n  if(mark > limit)\n    return new Date(ev.start);\n\n  var newDate = new Date(ev.start);\n\n  function getPeriods() {\n    // diff is diff in days between initial startdate of the seed event (mark)\n    // and enddate of the current instance (limit)\n    var diff = _date.getDiffInDays(limit, mark, 'floor')\n      , pDays = ev.recurrence.every;\n\n    if (ev.frequency == 'week')\n      pDays *= 7;\n\n    return Math.floor(diff / pDays);\n  }\n\n  switch (ev.frequency) {\n    case 'day':\n      var days = newDate.getDate()\n              + (getPeriods() + (prev ? 0 : 1)) * ev.recurrence.every;\n\n      newDate.setDate(days);\n    break;\n\n    case 'week':\n      var offset = getPeriods() * (ev.recurrence.every * 7);\n      var wlimit = new Date(+limit - (_date.getDiff(mark, ev.start)));\n\n      _date.applyTZCorrection(wlimit, limit, -1);\n\n      this._walkWeek(ev.start, +ev.start, function (date, prevDate, nextDate) {\n        date = new Date(date);\n        date.setDate(date.getDate() + offset);\n\n        nextDate = new Date(nextDate);\n        nextDate.setDate(nextDate.getDate() + offset);\n\n        if(wlimit >= date)\n          newDate = new Date(prev ? date : nextDate);\n      });\n    break;\n\n    case 'month':\n      var diffInMonths = _date.getDiffInMonths(limit, mark, true)\n        , periods = Math.max(0, (diffInMonths / ev.recurrence.every | 0));\n\n      if (ev.recurrence['repeat-on'].mode == 'day-of-month') {\n        // periods dir correction\n        periods+= prev ? 0 : 1;\n\n        var monthNumber = newDate.getMonth() + ev.recurrence.every * periods;\n\n        // existance day in next month control\n        var tmpDate = new Date(newDate);\n        tmpDate.setDate(1);\n        tmpDate.setMonth(monthNumber);\n\n        if(_date.getDaysInMonth(tmpDate) >= newDate.getDate())\n          newDate.setMonth(monthNumber);\n        else\n          newDate.setMonth(monthNumber + ev.recurrence.every);\n      }\n      else {\n        var diffInMonths = _date.getDiffInMonths(limit, mark)\n          , periods = Math.max(0, (diffInMonths / ev.recurrence.every | 0));\n\n        // mode: day-of-week\n        var nW = _date.getWeekOfDay(this.ev.start)\n          , nD = this.ev.start.getDay();\n\n        mark = new Date(ev.start);\n        mark.setMonth(mark.getMonth() + ev.recurrence.every * periods);\n\n        _date.setByWeekAndDay(mark, nW, nD);\n\n        // move to end of mark if is 'next' direction\n        if (!prev)\n          mark = new Date(+mark + _date.getDiff(ev.end, ev.start) - 1);\n\n        // periods offset correction\n        periods += (limit <= mark ? -1 : 0) + (prev ? 0 : 1);\n\n        newDate.setMonth(newDate.getMonth() + ev.recurrence.every * periods);\n        _date.setByWeekAndDay(newDate, nW, nD);\n      }\n    break;\n\n    case 'year':\n      var diffInYears = _date.getDiffInYears(limit, mark, true);\n\n      if (dir == 'next')\n        diffInYears+= ev.recurrence.every;\n\n      var period = diffInYears /ev.recurrence.every | 0;\n      newDate.setFullYear(newDate.getFullYear() + period * ev.recurrence.every);\n    break;\n  }\n\n  return newDate;\n}\n\n/**\n * _getDatePrevInstance()\n * return a date of previous instance.\n *\n * @param {Date} ref: reference to computing\n *\n * return {Date}\n */\n\npttSeed._getDatePrevInstance = function (ref) {\n  return this._getDateInstance(ref);\n}\n\n/**\n * _getDateNextInstance()\n */\n\npttSeed._getDateNextInstance = function (ref) {\n  var next = this._getDateInstance(ref, 'next');\n  return next;\n}\n\n/**\n * _getDateNextJump()\n */\n\npttSeed._getDateNextJump = function (_ref) {\n\n  var diff = _date.getDiff(this.ev.end, this.ev.start)\n    , ref = new Date(+_ref + diff)\n\n  _date.applyTZCorrection(ref, _ref);\n\n  if (this.ev.allDay) {\n    clearTime(ref);\n    ref.setDate(ref.getDate() + 1);\n  }\n\n  return this._getDateInstance(ref, 'next');\n}\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/node_modules/calendar-tools/lib/util.js":"/*!\n* util usefull functions\n* Copyright(c) 2011 Damian Suarez <rdsuarez@gmail.com>\n* MIT Licensed\n*/\n\n/**\n * time constants\n */\n\nvar _minute = 1000 * 60\n  , _hour = _minute*60\n  , _day = _hour*24\n  , _week = _day * 7;\n\n/**\n * days map\n * used in weekly mode process.\n */\n\nvar daysMap = { su: 0, m: 1, t: 2, w: 3, th: 4, f: 5, sa: 6 };\n\n/**\n * date usefull functions *\n */\n\nvar _date = module.exports.date = {};\n\n/**\n * exports constants\n */\n\n_date['const'] = {\n    minute: _minute\n  , hour: _hour\n  , day: _day\n  , week: _week\n  , daysMap: daysMap\n}\n\n/**\n * clearTime()\n *\n * @param {Date} date: date to clear time\n * @para, {Boolean} clone: if is true clones new date\n *\n * return {Date} date\n */\n\nvar clearTime = _date.clearTime = function (date, clone) {\n  var _date = date;\n\n  if (clone)\n    _date = new Date(date);\n\n  else if (typeof date == 'number')\n    _date = new Date(Number(date));\n\n  _date.setMilliseconds (0);\n  _date.setSeconds (0);\n  _date.setMinutes (0);\n  _date.setHours (0);\n\n  return _date;\n}\n\n/**\n * Returns if a certain year is a leap year\n */\n\n_date.isLeapYear = function (year){\n  return (((year % 4 === 0) && (year % 100 !== 0)) || (year % 400 === 0));\n};\n\n/**\n * Returns days in a month by year\n */\n\n_date.getDaysInMonth = function (){\n  var args = arguments\n    , year = args[0] instanceof Date ? args[0].getFullYear() : args[0]\n    , month = args[0] instanceof Date ? args[0].getMonth() : args[1];\n\n  return [31, (_date.isLeapYear(year) ? 29 : 28), 31, 30, 31, \n          30, 31, 31, 30, 31, 30, 31][month];\n};\n\n/**\n * Apply timezone diff correction\n */\n\n_date.applyTZCorrection = function (date, dateToCompare, sign) {\n  sign = sign || 1;\n  var tzdiff = _date.getTZDiff(date, dateToCompare);\n\n  if (tzdiff)\n    date.setMinutes(date.getMinutes() + tzdiff * sign);\n\n  return date;\n}\n\n/**\n * getTZDiff()\n * returns the timezone difference between given dates\n */\n\n_date.getTZDiff = function (end, start) {\n  return end.getTimezoneOffset() - start.getTimezoneOffset()\n}\n\n/**\n * diff in milliseconds\n * support Dylight saving time nightmare correction.\n */\n\n_date.getDiff = function (end, start) {\n  var dim = _date.getTZDiff(end, start) * _minute\n    , diff = +end - +start - dim;\n  return diff;\n}\n\n/**\n * diff in days\n * support Dylight saving time nightmare correction.\n */\n\n_date.getDiffInDays = function (end, start, mtd) {\n  var diff = _date.getDiff(end, start);\n  mtd = mtd || 'ceil';\n  return Math[mtd](diff / _day);\n}\n\n\n/**\n * getDiffInMonths()\n */\n\n_date.getDiffInMonths = function (end, start, noRound) {\n  var tempStart = new Date(start)\n    , tempEnd = new Date(end);\n\n  tempStart.setFullYear(2000);\n  tempEnd.setFullYear(2000);\n\n  tempStart.setMonth(0);\n  tempEnd.setMonth(0);\n\n  var less = tempEnd < tempStart && noRound ? 1 : 0;\n  return (end.getFullYear() - start.getFullYear()) * 12\n       + (end.getMonth() - start.getMonth() - less);\n}\n\n/**\n * getDiffInMonths()\n */\n\n_date.getDiffInYears = function (end, start, noRound) {\n  return _date.getDiffInMonths(end, start, noRound) / 12 | 0;\n}\n\n/**\n * getFormattedDate()\n *\n * @paramn {Date} date\n * @param {Boolean} cp: complete format date with zeros\n *\n * return {String} date: eg 07/18/1977\n */\n\nvar getFormattedDate = _date.getFormattedDate = function (date, cp) {\n  var d = date.getDate()\n    , m = date.getMonth() + 1\n  var arrDate = [\n          cp && m < 10 ? '0' + m : m\n        , cp && d < 10 ? '0' + d : d\n        , date.getFullYear()\n      ]\n\n  return arrDate.join('/');\n}\n\n/**\n * getFormattedTime()\n * return hh:mm tt string\n */\n\nvar getFormattedTime = _date.getFormattedTime = function (date) {\n  var h = date.getHours()\n    , m = date.getMinutes()\n    , s = date.getSeconds()\n    , ampm =  h < 12 ? 'AM' : 'PM';\n\n  h = !h ? 12 : (h > 12 ? (h - 12) : h);\n\n  return (h < 10 ? '0' + h : h) + ':' + (m < 10 ? '0' + m : m) + ' ' + ampm;\n}\n\n/**\n * Returns week number for the date into current view\n * @param {Date Object} date\n * @return {Number}\n */\n\nvar getWeekOfDay = _date.getWeekOfDay = function (date) {\n  return Math.floor((date.getDate() - 1 ) / 7);\n}\n\n/**\n * setByWeekAndDay()\n *\n * set date passing week and day number.\n * @param {Date} date: date to modify\n * @param {String|Number} week: week number (row)\n * @param {String|Number} day: day number (col)\n *\n * return {Date}\n *\n * eg: Oct 2011\n *\n *     S   M   T   W  Th   F  Sa\n *     0   1   2   3   4   5   6 \n *  ------------------------------\n *  | 25  26  27  28  29  30   1 |\n *  |  2   3   4   5   6   7   8 |\n *  |  9  10  11  12  13  14  15 |\n *  | 16  17  18  19  20  21  22 |\n *  | 23  24  25  26  27  28  29 |\n *  | 30  31   1   2   3   4   5 |\n *  ------------------------------\n *\n * week number is always into date month\n *\n * var d = new Date (2011, 9, 1);\n * setByWeekAndDay (d, 0, 6) -> Sat, 01 Oct 2011\n * setByWeekAndDay (d, 0, 1) -> Mon, 04 Oct 2011\n * setByWeekAndDay (d, 2, 4) -> Thu, 20 Oct 2011\n *\n */\n\nvar setByWeekAndDay = _date.setByWeekAndDay = function (date, week, day) {\n  var d = new Date(date);\n  d.setDate(1);\n\n  var diff = d.getDay() - day\n    , n = (week + 1) * 7 - diff + 1;\n\n  n = diff <= 0 ? n - 7 : n;\n\n  d.setDate(n);\n  if (_date.getDiffInMonths(d, date))\n    n -= 7;\n\n  date.setDate(n);\n\n  return date;\n}\n\n\n/**\n * fixDate\n * copied from fullCalendar\n */\n\nfunction fixDate(d, check) {\n  // force d to be on check's YMD, for daylight savings purposes\n  if (+d) { // prevent infinite looping on invalid dates\n    while (d.getDate() != check.getDate()) {\n      d.setTime(+d + (d < check ? 1 : -1) * HOUR_MS);\n    }\n  }\n}\n\n/**\n * parseISO8601 - copied form fullCalendar\n */\n\nvar parseISO8601 = _date.parseISO8601 = function (s, ignoreTimezone) {\n if (typeof s != 'string')\n    return s;\n\n  // ignoreTimezone defaults to false\n  // derived from http://delete.me.uk/2005/03/iso8601.html\n  // TODO: for a know glitch/feature, read tests/issue_206_parseDate_dst.html\n  var m = s.match(/^([0-9]{4})(-([0-9]{2})(-([0-9]{2})([T ]([0-9]{2}):([0-9]{2})(:([0-9]{2})(\\.([0-9]+))?)?(Z|(([-+])([0-9]{2})(:?([0-9]{2}))?))?)?)?)?$/);\n  if (!m)\n    return null;\n\n  var date = new Date(m[1], 0, 1);\n\n  if (ignoreTimezone || !m[14]) {\n    var check = new Date(m[1], 0, 1, 9, 0);\n    if (m[3]) {\n      date.setMonth(m[3] - 1);\n      check.setMonth(m[3] - 1);\n    }\n    if (m[5]) {\n      date.setDate(m[5]);\n      check.setDate(m[5]);\n    }\n    fixDate(date, check);\n    if (m[7]) {\n      date.setHours(m[7]);\n    }\n    if (m[8]) {\n      date.setMinutes(m[8]);\n    }\n    if (m[10]) {\n      date.setSeconds(m[10]);\n    }\n    if (m[12]) {\n      date.setMilliseconds(Number(\"0.\" + m[12]) * 1000);\n    }\n    fixDate(date, check);\n  }\n  else {\n    date.setUTCFullYear(\n        m[1]\n      , m[3] ? m[3] - 1 : 0\n      , m[5] || 1\n    );\n    date.setUTCHours(\n        m[7] || 0\n      , m[8] || 0\n      , m[10] || 0\n      , m[12] ? Number(\"0.\" + m[12]) * 1000 : 0\n    );\n\n    var offset = Number(m[16]) * 60 + (m[18] ? Number(m[18]) : 0);\n    offset *= m[15] == '-' ? 1 : -1;\n    date = new Date(+date + (offset * 60 * 1000));\n  }\n\n  return date;\n}\n\n/**\n * parse from weird ISO format\n */\n\n_date.parseFromWeirdISOFormat = function (d, tz) {\n  var parts = d.match(/(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)T(\\d\\d)(\\d\\d)(\\d\\d)/);\n\n  if (!parts) {\n    var simple = d.match(/(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)/);\n    if (!simple) return;\n\n    return new Date(simple[1], simple[2] -1, simple[3]);\n  }\n\n  var date = new Date();\n\n  date.setMilliseconds(0);\n  date.setSeconds(parts[6]);\n  date.setMinutes(parts[5]);\n  date.setHours(parts[4]);\n\n  date.setDate(parts[3]);\n  date.setMonth(parts[2] - 1);\n  date.setFullYear(parts[1]);\n\n  return date;\n};\n\n/**\n * parse date from TZID format\n */\n\n_date.parseFromTZID = function (v) {\n  var parts = v.match(/TZID=([^:]+):(\\d+)T(\\d+)/);\n  if (!parts) return;\n\n  var date = _date.parseFromWeirdISOFormat(parts[2] + 'T' + parts[3], parts[1]);\n\n  // debug: TZID parsed with date %s, date\n  return date;\n};\n\n/**\n * String usefull functions\n */\n\nvar _string = module.exports.string = {};\n\n/**\n * Escape a string with html entities\n *\n * @param {String} string to escape\n * @api public\n */\n\n\n_string.escape = function (str){\n  return str\n    .replace(/&/g, '&amp;')\n    .replace(/>/g, '&gt;')\n    .replace(/</g, '&lt;')\n    .replace(/\"/g, '&quot;');\n};\n\n_string.attr = function (str) {\n  return str ? str.replace(/\"/g, '\\\\\"') : '';\n};\n\n_string.content = function (str) {\n  return str ? _string.escape(str) : '';\n};\n\n/**\n * date method\n * @param {Date} v: date object\n * @param {Boolean} a: all-day\n * @param {Boolean} oc: date offset correction\n *\n * oc(offset correction) is used when the object event is patched to google\n * event. We need apply one day to make compatibily between fullCalendar and\n * google.\n *\n */\n\n_string.date = function (v, a, oc) {\n  // clone date\n  var _v = new Date(v);\n  if (a && oc)\n    _v.setDate(_v.getDate() + 1);\n\n  var date = JSON.stringify(_v).replace(/\"/g, '');\n  return a ? date.substring(0, 10) : date;\n};\n\n_string.dateTZID = function (v, tz) {\n  var str = (JSON.stringify(v).replace(/[-, :,\\.]/g, '')).substring(1, 16);\n  return 'TZID=' + (tz ? (tz + ':' + str) : str);\n};\n\n_string.UTCTime = function (v, utc) {\n  var str = (JSON.stringify(v).replace(/[-, :,\\.]/g, '')).substring(1, 16);\n  str += utc ? 'Z' : '';\n\n  return str;\n};\n\n\n/**\n * value() method\n * return value date adding (or not) txt label\n *\n * @param {Date} _d\n * @param {Boolean} noAddLabel\n * @param {Boolean} allDay correction\n */\n\n_string.value = function (_d, noAddLabel, allDay) {\n  var d = new Date(_d);\n  if(allDay) d.setDate(d.getDate() + 1);\n\n  var strDate = JSON.stringify(d).split('T')[0].replace(/[\", -]/g, '');\n  return !noAddLabel ? 'VALUE=DATE:' + strDate : strDate;\n};\n\n\n/**\n * Array usefull functions\n */\n\nvar _array = module.exports.array = {};\n\n/**\n * indexOf(). supports for IE\n *\n * @param {Array} array\n * @param item\n */\n\n_array.indexOf = function (array, item) {\n  if (!Array.prototype.indexOf) {\n    /*\n     * copied from Mozilla Develop Center\n     * https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexO://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf\n     */\n\n    if (array === void 0 || array === null)\n      throw new TypeError();\n\n    var t = Object(array)\n      , len = t.length >>> 0;\n\n    if (len === 0)\n      return -1;\n\n    var n = 0;\n    if (arguments.length > 1) {\n      n = Number(arguments[2]);\n      if (n !== n)\n        n = 0;\n      else if (n !== 0 && n !== Infinity && n !== -Infinity)\n        n = (n > 0 || -1) * Math.floor(Math.abs(n));\n    }\n    if (n >= len)\n      return -1;\n\n    var k = n >= 0 ? n : Math.max(len - Math.abs(n), 0);\n    for (; k < len; k++)\n      if (k in t && t[k] === item)\n        return k;\n\n    return -1;\n  }\n  else\n    return array.indexOf(item);\n}\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/node_modules/calendar-tools/lib/instance.js":"/*!\n* Instance\n* Copyright(c) 2011 Damian Suarez <rdsuarez@gmail.com>\n* MIT Licensed\n*/\n\n/**\n * add util module\n */\n\nvar util = require('./util');\n\n/**\n * alias\n */\n\nvar _date = util.date;\n\n/**\n * exports Instance Class\n */\n\nvar modInstance = module.exports = function (Seed, options) {\n  return new Instance(Seed, options);\n}\n\n/**\n * Instance class. Creates a instance of seed event\n */\n\nfunction Instance (Seed, dateReference) {\n  this._seed = Seed;\n  this._create(dateReference);\n}\n\n// alias Instance prototype\nvar pptInst = Instance.prototype;\n\n/**\n * creates an instance event\n */\n\npptInst._create = function (dateReference) {\n  var clone = this.clone()\n    , diff = _date.getDiff(this._seed.ev.end, this._seed.ev.start);\n\n  // set cloned start date\n  clone.start = new Date(\n          dateReference.getFullYear()\n        , dateReference.getMonth()\n        , dateReference.getDate()\n        , this._seed.ev.start.getHours()\n        , this._seed.ev.start.getMinutes()\n        , this._seed.ev.start.getSeconds()\n        , this._seed.ev.start.getMilliseconds()\n    );\n\n  // set cloned end date\n  clone.end = new Date(+clone.start + diff);\n  _date.applyTZCorrection(clone.end, clone.start);\n\n  // set cloned instances as Instance Object properties\n  for (var k in clone)\n    this[k] = clone[k];\n\n  return clone;\n}\n\n/**\n * clone an seed event\n */\n\npptInst.clone = function () {\n  var newInstance = JSON.parse(JSON.stringify(this._seed.ev));\n\n  newInstance.start = new Date(newInstance.start);\n  newInstance.end = new Date(newInstance.end);\n\n  if (newInstance.stop)\n    newInstance.stop = _date.parseISO8601(newInstance.stop);\n\n  // on date generation\n  if (newInstance.recurrence) {\n    var endBy = newInstance.recurrence['end-by'];\n    if (endBy && endBy.on)\n      newInstance.recurrence['end-by'].on = new Date(endBy.on);\n  }\n\n  return newInstance;\n};\n\n/**\n * get the instance number\n */\n\npptInst.getNumber = function () {\n  return this.n;\n}\n\n\n/**\n * get if is the last instance into series\n */\n\npptInst.isLast = function () {\n  var c = this.getSeed()._getCountdown();\n  return this.getNumber() === (c - 1);\n}\n\n/**\n * get the previous instance into series\n */\n\npptInst.getPrev = function () {\n  return this._prevInst;\n}\n\n/**\n * get the seed event\n */\n\npptInst.getSeed = function () {\n  return this._seed;\n}\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/node_modules/calendar-tools/lib/atom.js":"/*!\n * atom\n * Copyright(c) 2011 Damian Suarez <rdsuarez@gmail.com>\n * MIT Licensed\n */\n\n/**\n * Module dependecies\n */\n\n  var Util = require('./util')\n    , RFC2445 = require('./rfc2445');\n\n/**\n * Alias\n */\n\n  var _str = Util.string;\n\n/**\n * genEvent() function\n * Getter that returns an event in XML format.\n * Usefull for the Google Calendar API.\n *\n * @param {Object} ev: Object Event\n *\n * return {String} event atom string\n */\n\nmodule.exports.genEvent = function (ev, opts) {\n\n  // default options\n  opts = opts || {};\n  var options = {\n          start: ev.start\n        , end: ev.end\n        , timezone: 'GMT'\n        , originalEvent: null\n      };\n\n  for (var k in options)\n    options[k] = opts[k] || options[k];\n\n  // timezone location\n  tz = options.timezone;\n\n  var orgEv = options,originalEvent;\n\n  return [\n      '<entry xmlns=\"http://www.w3.org/2005/Atom\" '\n    ,        'xmlns:gd=\"http://schemas.google.com/g/2005\" '\n    ,        'xmlns:gCal=\"http://schemas.google.com/gCal/2005\" '\n    ,        'gd:fields=\"gd:recurrence,gd:when\">'\n    ,   \"<title>\" + _str.content(ev.title) + \"</title>\"\n\n    ,   ev.frequency\n          ? \"<gd:recurrence>\"\n              + _str.content(RFC2445.genRecurrenceString(ev, opts)) \n              + \"</gd:recurrence>\"\n          : \"<gd:when startTime=\\\"\"\n              + _str.attr(_str.date(options.start, ev.allDay)) + \"\\\" \"\n              + \"endTime=\\\"\"\n              + _str.attr(_str.date(options.end, ev.allDay, true)) + \"\\\" />\"\n\n    ,   orgEv\n          ? \"<gd:originalEvent href=\\\"\" + orgEv.href + \"\\\" id=\\\"\" + orgEv.id + \"\\\">\"\n              + \"<gd:when startTime=\\\"\" + org.Ev.startTime + \"\\\"/>\"\n              + \"</gd:originalEvent>\"\n          : \"\"\n\n    ,   \"<gd:where valueString=\\\"\" + _str.attr(tz) + \"\\\"></gd:where>\"\n    ,   ev.isNew \n          ? \"<published>\" + _str.date(new Date) + \"</published>\"\n          : \"<updated>\" + _str.date(new Date) + \"</updated>\"\n    , \"</entry>\"\n  ].join('');\n};\n","/home/travis/build/npmtest/node-npmtest-calendar-tools/node_modules/calendar-tools/lib/rfc2445.js":"/*!\n* calen\n* Copyright(c) 2011 Damian Suarez <rdsuarez@gmail.com>\n* MIT Licensed\n*/\n\n/**\n * Module dependecies\n */\n\nvar Util = require('./util');\n\n/**\n * Alias\n */\n\nvar _str = Util.string\n  , _date = Util.date;\n\n/**\n * freqquency names map\n */\n\nvar freqNamesMap = {\n        YEARLY: 'year'\n      , MONTHLY: 'month'\n      , WEEKLY: 'week'\n      , DAILY: 'day'\n    };\n\n/**\n * days map from RFC2445 protocol to recurrence structure\n */\n\nvar daysMapRFC2445toRec = {\n      SU: 'su'\n    , MO: 'm'\n    , TU: 't'\n    , WE: 'w'\n    , TH: 'th'\n    , FR: 'f'\n    , SA: 'sa'\n  };\n\n/**\n * days map from recurrence structure to RFC2445 protocol\n */\n\nvar daysMapRecToRFC2445 = {\n      su: 'SU'\n    , m: 'MO'\n    , t: 'TU'\n    , w: 'WE'\n    , th: 'TH'\n    , f: 'FR'\n    , sa: 'SA'\n  };\n\n/**\n * days names\n */\n\nvar dayNames = ['su', 'm', 't', 'w', 'th', 'f', 'sa'];\n\n/**\n * RFC2445 usefull functions\n */\n\nvar RFC2445 = module.exports = {};\n\n/**\n * generate functions *\n */\n\n/**\n * genRecurrenceString\n * generates a RFC2445 recurrence string passing an Event Object\n *\n * @param {Object} ev: Event Object\n *\n * return {String} RFC2445 recurrence string\n */\n\nRFC2445.genRecurrenceString = function (ev, opts) {\n  if (!ev.frequency) return '';\n\n  opts = opts  || {};\n\n  var options = {\n          start: ev.start\n        , end: ev.end\n        , timezone: 'GMT'\n      };\n\n  for (var k in options)\n    options[k] = opts[k] || options[k];\n\n  var tz = options.timezone;\n\n  // period: DTSTART, DTEND\n  var rules = [\n          'DTSTART' + (ev.allDay\n                          ? ';' + _str.value(options.start)\n                          : ';' + _str.dateTZID(options.start, tz))\n        , 'DTEND' + (ev.allDay\n                          ? ';' + _str.value(options.end, false, ev.allDay)\n                          : ';' + _str.dateTZID(options.end, tz))\n      ];\n\n  // RRULE - frequency value\n  var rrule = ''\n    , steps = ['freq', 'repeat', 'end-by', 'interval']\n    , endBy = ''\n    , interval = '';\n\n  // end-by type\n\n  // COUNT\n  if (ev.recurrence['end-by'].type == 'after')\n    endBy = ';COUNT=' + ev.recurrence['end-by'].after;\n  // ON\n  if (ev.recurrence['end-by'].type == 'on')\n    endBy = ';UNTIL=' + _str.value(ev.recurrence['end-by'].on, true, true);\n\n  // INTERVAL\n  if (ev.recurrence.every != 1)\n    interval = ';INTERVAL=' + ev.recurrence.every;\n\n  for (var st = 0; st < steps.length; st++) {\n    if (st == 0 || st == 2) {\n      switch (ev.frequency) {\n        case 'year':\n          rrule += st == 0\n                    ? 'RRULE:FREQ=YEARLY'\n                    : '';\n        break;\n\n        case 'month':\n          rrule += st == 0\n                    ? 'RRULE:FREQ=MONTHLY'\n                    : (st == 2\n                        ? (ev.recurrence['repeat-on'].mode == 'day-of-month'\n                            ? ';BYMONTHDAY=' + ev.start.getDate()\n                            : ';BYDAY=' + (_date.getWeekOfDay(ev.start) + 1)\n                              + daysMapRecToRFC2445[dayNames[options.start.getDay()]])\n                        : '');\n        break;\n\n        case 'week':\n          var days = '';\n          for (var l in ev.recurrence['repeat-on'])\n            days += daysMapRecToRFC2445[l] + ','\n\n          days = days.substring(0, days.length - 1);\n\n          rrule += st == 0\n                    ? 'RRULE:FREQ=WEEKLY;BYDAY=' + days\n                    : '';\n        break;\n\n        case 'day':\n          rrule += st == 0\n                    ? 'RRULE:FREQ=DAILY'\n                    : '';\n        break;\n      };\n    }\n\n    // add end-by\n    else if (st == 1)\n      rrule += endBy;\n\n    // add end-by\n    else if (st == 3)\n      rrule += interval;\n\n  };\n\n  rules.push(rrule);\n\n  return rules.join(\"\\r\\n\");\n}\n\n/**\n * getting functions\n */\n\n/**\n * getRecurrenceObj() method.\n * return a recurrence object of LearnBoost event passing RFC2445 string\n *\n * @param {string} str: RFC2445 recurrence string\n * return {Object} recurrence LearnBoost object\n */\n\nRFC2445.getRecurrenceObj = function (str) {\n  // debug: RFC2445 \\x1B[0;33m%s\\x1B[0m string to recurrence object, str\n  var recRule = str.match(/RRULE(.+)/)\n    , recObj = {\n          every: 1\n        , 'end-by': {}\n        , exceptions: []\n        , 'repeat-on': {}\n      }\n    , _freq = '';\n\n  recRule = recRule.length ? recRule[0] : null;\n\n  if (!recRule) return null;\n\n  // debug: recurrence rule \\x1B[0;33m%s\\x1B[0m, recRule\n  var recPrpsRule = recRule.split(';');\n\n  for (var k = 0; k < recPrpsRule.length; k++) {\n    var prp = recPrpsRule[k].split('=');\n    // debug: recurrence property [%s]: \\x1B[0;33m%s: %j\\x1B[0m, k, prp[0], prp[1]\n\n    // recurrence type\n    if (prp[0] == 'RRULE:FREQ') {\n      _freq = prp[1];\n    }\n\n    // INTERVAL/repeat\n    if (prp[0] == 'INTERVAL') {\n      recObj.every = prp[1];\n    }\n\n    // end-by properties\n    // AFTER mode\n    else if (prp[0] == 'COUNT') {\n      recObj['end-by'].type = 'after';\n      recObj['end-by'].after = prp[1];\n    }\n\n    // UNTIL/on mode\n    else if (prp[0] == 'UNTIL') {\n      recObj['end-by'].type = 'on';\n      var data = _date.parseFromWeirdISOFormat(prp[1]);\n      recObj['end-by'].on = new Date(data);\n      \n    }\n\n    // BYDAY/repeat-on. Used for:\n    // - weekly mode\n    // - monthly mode - day on week\n    else if (prp[0] == 'BYDAY') {\n\n      if (_freq == 'WEEKLY') {\n        var days = prp[1].split(',');\n        for (var l = 0; l < days.length; l++) {\n          var key = daysMapRFC2445toRec[days[l]];\n          recObj['repeat-on'][key] = 'on';\n        };\n      }\n      else if (_freq == 'MONTHLY') {\n        // for monthly trecurrence type simply defines mode\n        recObj['repeat-on'].mode = 'day-of-week';\n        \n      }\n    }\n\n    // BYMONTHDAY/repeat-on. Used for:\n    // - monthly mode\n    else if (prp[0] == 'BYMONTHDAY')\n      recObj['repeat-on'].mode = 'day-of-month';\n\n  };\n\n  // setting default options\n  // end-by type\n  recObj['end-by'].type = recObj['end-by'].type || 'never';\n\n  return recObj;\n};\n\n/**\n * getFrequency\n * retrieve frequency property from google RFC2445 recurrence string\n *\n * @param {string} str\n * @param {Object} frequency names map\n *    {\n *        YEARLY: 'year'\n *      , MONTH:  'month'\n *      , WEEKLY: 'week'\n *      , DAILY': 'day'\n *    }\n */\n\nRFC2445.getFrequency = function (str, namesMap) {\n  // debug: get frequency property from RFC2445 \\x1B[0;33m%s\\x1B[0m, str\n  // frequency names map\n  namesMap = namesMap || freqNamesMap;\n \n  var frequency = str.match(/FREQ=([A-Z]+)/);\n\n  if (frequency)\n    return namesMap[frequency[1]];\n  return null;\n};\n\n/**\n * retrieve all-day property from RFC2445 recurrence string\n */\n\nRFC2445.getAllday = function (str) {\n  // debug: get all-day property from RFC2445 \\x1B[0;33m%s\\x1B[0m, str\n  // deduces 'all-day' property through the DTSTART format property\n  var dtstart = str.match(/(^DTSTART;([^ ]+))(:\\w+)(T)/);\n\n  return dtstart ? false : true;\n};\n"}